module Fibonacci_Test where

import Test.QuickCheck(property)
import Test.QuickCheckModifiers(NonNegative)

import Fibonacci(na誰veRecursive, tailRecursive, lazyListRecursive, lazyListZipWith)

fibonacciProperty :: (Integer -> Integer) -> Integer -> Bool
fibonacciProperty f n
    | n < 0 = False
    | n == 0 = f n == 0
    | n == 1 = f n == 1
    | n > 1 = f n == f (n - 1) + f (n - 2)

-- Do not attempt to test the na誰veRecursive implementation due to the O(2^n) behaviour.
-- fibonacciNa誰veRecursiveProperty = property ((fibonacciProperty na誰veRecursive) . NonNegative.getNonNegative)
fibonacciTailRecursiveProperty = property ((fibonacciProperty tailRecursive) . NonNegative.getNonNegative)
fibonacciLazyListRecursiveProperty = property ((fibonacciProperty lazyListRecursive) . NonNegative.getNonNegative)
fibonacciLazyListZipWithProperty = property ((fibonacciProperty lazyListZipWith) . NonNegative.getNonNegative)
