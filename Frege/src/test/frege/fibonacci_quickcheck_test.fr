module Fibonacci_QuickCheck_Test where

import Test.QuickCheck(quickCheck, property)
import Test.QuickCheckModifiers(NonNegative)

import Fibonacci(na誰veRecursive, tailRecursive, lazyList_recursion, lazyList_zipWith)

fibonacci_property :: (Integer -> Integer) -> Integer -> Bool
fibonacci_property f n
    | n == 0 = f n == 0
    | n == 1 = f n == 1
    | n > 1 = f n == f (n - 1) + f (n - 2)

-- Do not attempt to test the na誰veRecursive implementation due to the exponential behaviour.
-- fibonacci_na誰veRecursive_property = property ((fibonacci_property na誰veRecursive) . NonNegative.getNonNegative)
fibonacci_tailRecursive_property = property ((fibonacci_property tailRecursive) . NonNegative.getNonNegative)
fibonacci_lazyList_recursion_property = property ((fibonacci_property lazyList_recursion) . NonNegative.getNonNegative)
fibonacci_lazyList_zipWith_property = property ((fibonacci_property lazyList_zipWith) . NonNegative.getNonNegative)
